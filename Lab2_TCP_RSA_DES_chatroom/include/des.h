#include <iostream>
#include <vector>
using namespace std;

class CDesOperate {
public:
    int encryption(string raw_data, string key, string& encry_res);  // 加密函数
    int decryption(string cipherText, string key, string& decry_res); // 解密函数
    static string des_key_gen(); // 生成随机DES秘钥

private:
    vector<bool> encry_proc(vector<bool> input, vector<vector<bool> > sub_key); // 处理64bit的加密函数
    vector<bool> decryption_proc(vector<bool> input, vector<vector<bool> > sub_key); // 处理64bit的解密函数

    vector< vector<bool> > encry_data_proc(string text); // 明文数据处理：string → bool
    vector< vector<bool> > decry_data_proc(string text); // 密文数据处理：string → bool
    vector<bool> key_process(string key); // key处理：string → bool

    vector<bool> init_replacement_IP(vector<bool> input, int type); // 初始/逆初始置换IP

    vector<bool> f_function(vector<bool> input, vector<bool> key); // f函数
    vector<bool> E_box(vector<bool> input); // f1: 选择扩展运算E
    vector<bool> key_add(vector<bool> input, vector<bool> key); // f2: 密钥加运算
    vector<bool> select_comp_op(vector<bool> input); // f3: 选择压缩运算S
    vector<bool> replace_op(vector<bool> input); // f4: 置换运算P

    vector< vector<bool> > make_key(vector<bool> initKey); // 生成16个密钥中的每一个子密钥，得到subKey
};


// 以下为需要的静态数组

// 初始置换IP
static int pc_first[64] = {
    58,50,42,34,26,18,10,2,
    60,52,44,36,28,20,12,4,
    62,54,46,38,30,22,14,6,
    64,56,48,40,32,24,16,8,
    57,49,41,33,25,17,9, 1,
    59,51,43,35,27,19,11,3,
    61,53,45,37,29,21,13,5,
    63,55,47,39,31,23,15,7
};

// 逆初始置换IP^(-1)
static int pc_last[64] = {
    40,8,48,16,56,24,64,32,
    39,7,47,15,55,23,63,31,
    38,6,46,14,54,22,62,30,
    37,5,45,13,53,21,61,29,
    36,4,44,12,52,20,60,28,
    35,3,43,11,51,19,59,27,
    34,2,42,10,50,18,58,26,
    33,1,41,9 ,49,17,57,25
};

// 按位取值或赋值
static unsigned int pc_by_bit[64] = {
    0x80000000L,0x40000000L,0x20000000L, 0x10000000L, 0x8000000L,
    0x4000000L, 0x2000000L, 0x1000000L,  0x800000L,   0x400000L,
    0x200000L,  0x100000L,  0x80000L,    0x40000L,    0x20000L,  0x10000L,
    0x8000L,    0x4000L,    0x2000L,     0x1000L,     0x800L,    0x400L,   0x200L,
    0x100L,     0x80L,      0x40L,0x20L, 0x10L,       0x8L,      0x4L,     0x2L,   0x1L,

    0x80000000L,0x40000000L,0x20000000L, 0x10000000L, 0x8000000L,
    0x4000000L, 0x2000000L, 0x1000000L,  0x800000L,   0x400000L,
    0x200000L,  0x100000L,  0x80000L,    0x40000L,    0x20000L,  0x10000L,
    0x8000L,    0x4000L,    0x2000L,     0x1000L,     0x800L,    0x400L,   0x200L,
    0x100L,     0x80L,      0x40L,       0x20L,       0x10L,     0x8L,     0x4L,   0x2L, 0x1L,
};

// 置换运算P
static int des_P[32] = {
   16,7 ,20,21,
   29,12,28,17,
   1 ,15,23,26,
   5 ,18,31,10,
   2 ,8 ,24,14,
   32,27,3 ,9 ,
   19,13,30,6 ,
   22,11,4 ,25
};

// 选择扩展运算E盒
static int des_E[48] = {
    32,1 ,2 ,3 ,4 ,5 ,4 ,5 ,
    6 ,7, 8 ,9 ,8 ,9 ,10,11,
    12,13,12,13,14,15,16,17,
    16,17,18,19,20,21,20,21,
    22,23,24,25,24,25,26,27,
    28,29,28,29,30,31,32,1
};

// 选择压缩运算S盒
static unsigned int des_S[8][64] = {
 {
    0xe,0x0,0x4,0xf,0xd,0x7,0x1,0x4,0x2,0xe,0xf,0x2,0xb,
    0xd,0x8,0x1,0x3,0xa,0xa,0x6,0x6,0xc,0xc,0xb,0x5,0x9,
    0x9,0x5,0x0,0x3,0x7,0x8,0x4,0xf,0x1,0xc,0xe,0x8,0x8,
    0x2,0xd,0x4,0x6,0x9,0x2,0x1,0xb,0x7,0xf,0x5,0xc,0xb,
    0x9,0x3,0x7,0xe,0x3,0xa,0xa,0x0,0x5,0x6,0x0,0xd
 },
 {
    0xf,0x3,0x1,0xd,0x8,0x4,0xe,0x7,0x6,0xf,0xb,0x2,0x3,
    0x8,0x4,0xf,0x9,0xc,0x7,0x0,0x2,0x1,0xd,0xa,0xc,0x6,
    0x0,0x9,0x5,0xb,0xa,0x5,0x0,0xd,0xe,0x8,0x7,0xa,0xb,
    0x1,0xa,0x3,0x4,0xf,0xd,0x4,0x1,0x2,0x5,0xb,0x8,0x6,
    0xc,0x7,0x6,0xc,0x9,0x0,0x3,0x5,0x2,0xe,0xf,0x9
 },
 {
    0xa,0xd,0x0,0x7,0x9,0x0,0xe,0x9,0x6,0x3,0x3,0x4,0xf,
    0x6,0x5,0xa,0x1,0x2,0xd,0x8,0xc,0x5,0x7,0xe,0xb,0xc,
    0x4,0xb,0x2,0xf,0x8,0x1,0xd,0x1,0x6,0xa,0x4,0xd,0x9,
    0x0,0x8,0x6,0xf,0x9,0x3,0x8,0x0,0x7,0xb,0x4,0x1,0xf,
    0x2,0xe,0xc,0x3,0x5,0xb,0xa,0x5,0xe,0x2,0x7,0xc
 },
 {
    0x7,0xd,0xd,0x8,0xe,0xb,0x3,0x5,0x0,0x6,0x6,0xf,0x9,
    0x0,0xa,0x3,0x1,0x4,0x2,0x7,0x8,0x2,0x5,0xc,0xb,0x1,
    0xc,0xa,0x4,0xe,0xf,0x9,0xa,0x3,0x6,0xf,0x9,0x0,0x0,
    0x6,0xc,0xa,0xb,0xa,0x7,0xd,0xd,0x8,0xf,0x9,0x1,0x4,
    0x3,0x5,0xe,0xb,0x5,0xc,0x2,0x7,0x8,0x2,0x4,0xe
 },
 {
    0x2,0xe,0xc,0xb,0x4,0x2,0x1,0xc,0x7,0x4,0xa,0x7,0xb,
    0xd,0x6,0x1,0x8,0x5,0x5,0x0,0x3,0xf,0xf,0xa,0xd,0x3,
    0x0,0x9,0xe,0x8,0x9,0x6,0x4,0xb,0x2,0x8,0x1,0xc,0xb,
    0x7,0xa,0x1,0xd,0xe,0x7,0x2,0x8,0xd,0xf,0x6,0x9,0xf,
    0xc,0x0,0x5,0x9,0x6,0xa,0x3,0x4,0x0,0x5,0xe,0x3
 },
 {
    0xc,0xa,0x1,0xf,0xa,0x4,0xf,0x2,0x9,0x7,0x2,0xc,0x6,
    0x9,0x8,0x5,0x0,0x6,0xd,0x1,0x3,0xd,0x4,0xe,0xe,0x0,
    0x7,0xb,0x5,0x3,0xb,0x8,0x9,0x4,0xe,0x3,0xf,0x2,0x5,
    0xc,0x2,0x9,0x8,0x5,0xc,0xf,0x3,0xa,0x7,0xb,0x0,0xe,
    0x4,0x1,0xa,0x7,0x1,0x6,0xd,0x0,0xb,0x8,0x6,0xd
 },
 {
    0x4,0xd,0xb,0x0,0x2,0xb,0xe,0x7,0xf,0x4,0x0,0x9,0x8,
    0x1,0xd,0xa,0x3,0xe,0xc,0x3,0x9,0x5,0x7,0xc,0x5,0x2,
    0xa,0xf,0x6,0x8,0x1,0x6,0x1,0x6,0x4,0xb,0xb,0xd,0xd,
    0x8,0xc,0x1,0x3,0x4,0x7,0xa,0xe,0x7,0xa,0x9,0xf,0x5,
    0x6,0x0,0x8,0xf,0x0,0xe,0x5,0x2,0x9,0x3,0x2,0xc
 },
 {
    0xd,0x1,0x2,0xf,0x8,0xd,0x4,0x8,0x6,0xa,0xf,0x3,0xb,
    0x7,0x1,0x4,0xa,0xc,0x9,0x5,0x3,0x6,0xe,0xb,0x5,0x0,
    0x0,0xe,0xc,0x9,0x7,0x2,0x7,0x2,0xb,0x1,0x4,0xe,0x1,
    0x7,0x9,0x4,0xc,0xa,0xe,0x8,0x2,0xd,0x0,0xf,0x6,0xc,
    0xa,0x9,0xd,0x0,0xf,0x3,0x3,0x5,0x5,0x6,0x8,0xb
 }
};

// 等分密钥
// 密钥置换选择 PC-1 (1)
static int key_left[28] = {
    57,49,41,33,25,17,9 ,
    1 ,58,50,42,34,26,18,
    10,2 ,59,51,43,35,27,
    19,11,3 ,60,52,44,36
};
// 密钥置换选择 PC-1 (2)
static int key_right[28] = {
    63,55,47,39,31,23,15,
    7 ,62,54,46,38,30,22,
    14,6 ,61,53,45,37,29,
    21,13,5 ,28,20,12,4
};

// 密钥循环左移
static int lshift_table[16] = { 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 };

// 密钥选取
static int key_choose[48] = {
    14,17,11,24,1 ,5 ,3 ,28,15,6 ,21,10,
    23,19,12,4 ,26,8 ,16,7 ,27,20,13,2 ,
    41,52,31,37,47,55,30,40,51,45,33,48,
    44,49,39,56,34,53,46,42,50,36,29,32
};