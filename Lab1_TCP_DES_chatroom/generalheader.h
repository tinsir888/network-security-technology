#include <iostream>
#include <vector>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <string>
#include <unistd.h>
#include <errno.h>
#include <stdio.h>
#define DES_KEY "BLACKHAT"
#define INIT_REPLACE_IP     233 //IP core
#define INVERSE_REPLACE_IP  234 //IP^-1 core
#define tcp_port 53558
#define max_msg_len 4096
#define max_line 20
#define default_server_addr "127.0.0.1"
using namespace std;
int server();
int client();
vector<bool> left_shift(int shift_bit, vector<bool> ls_vector);
int binary2dec(vector<bool> binary);
vector<bool> dec2binary(int decimal, int bit);
vector<bool> XOR(vector<bool> input1, vector<bool> input2);
class CDesOperate {
public:
    int encry_operation(string plainText, string key, string& encry_res);//encry operation
    int decry_operation(string cipherText, string key, string& decry_res);//decry operation
private:
    vector<bool> encry_process(vector<bool> input, vector<vector<bool> > subKey);
    // encryption procession 64bit
    vector<bool> decry_process(vector<bool> input, vector<vector<bool> > subKey);
    // decryption procession 64bit

    vector< vector<bool> > encry_str2bool(string text); //encryption string to bool
    vector< vector<bool> > decry_str2bool(string text); //decryption string to bool
    vector<bool> key_str2bool(string key); // key string to bool

    vector<bool> init_replacement_IP(vector<bool> input, int type);
    //(reverse) initial replace operation IP(^(-1))

    vector<bool> f_func(vector<bool> input, vector<bool> key); //F function
    vector<bool> E_Box(vector<bool> input); // f1 select expand operation
    vector<bool> key_add(vector<bool> input, vector<bool> key); // f2: key add operation
    vector<bool> select_comp_operation(vector<bool> input); // f3: select compress operatioin S
    vector<bool> replace_operation(vector<bool> input); // f4: replacement operation P

    vector< vector<bool> > gen_subkey(vector<bool> initKey); //generate subkey
};


// fixed static array needed below

// init IP
static int init_rep_IP[64] = {
    58,50,42,34,26,18,10,2,
    60,52,44,36,28,20,12,4,
    62,54,46,38,30,22,14,6,
    64,56,48,40,32,24,16,8,
    57,49,41,33,25,17,9, 1,
    59,51,43,35,27,19,11,3,
    61,53,45,37,29,21,13,5,
    63,55,47,39,31,23,15,7
};

// init IP^(-1)
static int inverse_init_rep_ip[64] = {
    40,8,48,16,56,24,64,32,
    39,7,47,15,55,23,63,31,
    38,6,46,14,54,22,62,30,
    37,5,45,13,53,21,61,29,
    36,4,44,12,52,20,60,28,
    35,3,43,11,51,19,59,27,
    34,2,42,10,50,18,58,26,
    33,1,41,9 ,49,17,57,25
};
// replacement operation P
static int rep_P[32] = {
   16,7 ,20,21,
   29,12,28,17,
   1 ,15,23,26,
   5 ,18,31,10,
   2 ,8 ,24,14,
   32,27,3 ,9 ,
   19,13,30,6 ,
   22,11,4 ,25
};

// selective expanded E box
static int des_E_box[48] = {
    32,1 ,2 ,3 ,4 ,5 ,4 ,5 ,
    6 ,7, 8 ,9 ,8 ,9 ,10,11,
    12,13,12,13,14,15,16,17,
    16,17,18,19,20,21,20,21,
    22,23,24,25,24,25,26,27,
    28,29,28,29,30,31,32,1
};

// selective compress operation S-box
static int des_S_box[8][64] = {
 {
    0xe,0x0,0x4,0xf,0xd,0x7,0x1,0x4,0x2,0xe,0xf,0x2,0xb,
    0xd,0x8,0x1,0x3,0xa,0xa,0x6,0x6,0xc,0xc,0xb,0x5,0x9,
    0x9,0x5,0x0,0x3,0x7,0x8,0x4,0xf,0x1,0xc,0xe,0x8,0x8,
    0x2,0xd,0x4,0x6,0x9,0x2,0x1,0xb,0x7,0xf,0x5,0xc,0xb,
    0x9,0x3,0x7,0xe,0x3,0xa,0xa,0x0,0x5,0x6,0x0,0xd
 },
 {
    0xf,0x3,0x1,0xd,0x8,0x4,0xe,0x7,0x6,0xf,0xb,0x2,0x3,
    0x8,0x4,0xf,0x9,0xc,0x7,0x0,0x2,0x1,0xd,0xa,0xc,0x6,
    0x0,0x9,0x5,0xb,0xa,0x5,0x0,0xd,0xe,0x8,0x7,0xa,0xb,
    0x1,0xa,0x3,0x4,0xf,0xd,0x4,0x1,0x2,0x5,0xb,0x8,0x6,
    0xc,0x7,0x6,0xc,0x9,0x0,0x3,0x5,0x2,0xe,0xf,0x9
 },
 {
    0xa,0xd,0x0,0x7,0x9,0x0,0xe,0x9,0x6,0x3,0x3,0x4,0xf,
    0x6,0x5,0xa,0x1,0x2,0xd,0x8,0xc,0x5,0x7,0xe,0xb,0xc,
    0x4,0xb,0x2,0xf,0x8,0x1,0xd,0x1,0x6,0xa,0x4,0xd,0x9,
    0x0,0x8,0x6,0xf,0x9,0x3,0x8,0x0,0x7,0xb,0x4,0x1,0xf,
    0x2,0xe,0xc,0x3,0x5,0xb,0xa,0x5,0xe,0x2,0x7,0xc
 },
 {
    0x7,0xd,0xd,0x8,0xe,0xb,0x3,0x5,0x0,0x6,0x6,0xf,0x9,
    0x0,0xa,0x3,0x1,0x4,0x2,0x7,0x8,0x2,0x5,0xc,0xb,0x1,
    0xc,0xa,0x4,0xe,0xf,0x9,0xa,0x3,0x6,0xf,0x9,0x0,0x0,
    0x6,0xc,0xa,0xb,0xa,0x7,0xd,0xd,0x8,0xf,0x9,0x1,0x4,
    0x3,0x5,0xe,0xb,0x5,0xc,0x2,0x7,0x8,0x2,0x4,0xe
 },
 {
    0x2,0xe,0xc,0xb,0x4,0x2,0x1,0xc,0x7,0x4,0xa,0x7,0xb,
    0xd,0x6,0x1,0x8,0x5,0x5,0x0,0x3,0xf,0xf,0xa,0xd,0x3,
    0x0,0x9,0xe,0x8,0x9,0x6,0x4,0xb,0x2,0x8,0x1,0xc,0xb,
    0x7,0xa,0x1,0xd,0xe,0x7,0x2,0x8,0xd,0xf,0x6,0x9,0xf,
    0xc,0x0,0x5,0x9,0x6,0xa,0x3,0x4,0x0,0x5,0xe,0x3
 },
 {
    0xc,0xa,0x1,0xf,0xa,0x4,0xf,0x2,0x9,0x7,0x2,0xc,0x6,
    0x9,0x8,0x5,0x0,0x6,0xd,0x1,0x3,0xd,0x4,0xe,0xe,0x0,
    0x7,0xb,0x5,0x3,0xb,0x8,0x9,0x4,0xe,0x3,0xf,0x2,0x5,
    0xc,0x2,0x9,0x8,0x5,0xc,0xf,0x3,0xa,0x7,0xb,0x0,0xe,
    0x4,0x1,0xa,0x7,0x1,0x6,0xd,0x0,0xb,0x8,0x6,0xd
 },
 {
    0x4,0xd,0xb,0x0,0x2,0xb,0xe,0x7,0xf,0x4,0x0,0x9,0x8,
    0x1,0xd,0xa,0x3,0xe,0xc,0x3,0x9,0x5,0x7,0xc,0x5,0x2,
    0xa,0xf,0x6,0x8,0x1,0x6,0x1,0x6,0x4,0xb,0xb,0xd,0xd,
    0x8,0xc,0x1,0x3,0x4,0x7,0xa,0xe,0x7,0xa,0x9,0xf,0x5,
    0x6,0x0,0x8,0xf,0x0,0xe,0x5,0x2,0x9,0x3,0x2,0xc
 },
 {
    0xd,0x1,0x2,0xf,0x8,0xd,0x4,0x8,0x6,0xa,0xf,0x3,0xb,
    0x7,0x1,0x4,0xa,0xc,0x9,0x5,0x3,0x6,0xe,0xb,0x5,0x0,
    0x0,0xe,0xc,0x9,0x7,0x2,0x7,0x2,0xb,0x1,0x4,0xe,0x1,
    0x7,0x9,0x4,0xc,0xa,0xe,0x8,0x2,0xd,0x0,0xf,0x6,0xc,
    0xa,0x9,0xd,0x0,0xf,0x3,0x3,0x5,0x5,0x6,0x8,0xb
 }
};

// half-divide key
// key replacement selective PC-1 (1)
static int key_PC_1[28] = {
    57,49,41,33,25,17,9 ,
    1 ,58,50,42,34,26,18,
    10,2 ,59,51,43,35,27,
    19,11,3 ,60,52,44,36
};
// key replacement selective PC-1 (2)
static int key_PC_2[28] = {
    63,55,47,39,31,23,15,
    7 ,62,54,46,38,30,22,
    14,6 ,61,53,45,37,29,
    21,13,5 ,28,20,12,4
};

// cycle left shift
static int left_shift_table[16] = { 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 };

// key choose
static int key_choose[48] = {
    14,17,11,24,1 ,5 ,3 ,28,15,6 ,21,10,
    23,19,12,4 ,26,8 ,16,7 ,27,20,13,2 ,
    41,52,31,37,47,55,30,40,51,45,33,48,
    44,49,39,56,34,53,46,42,50,36,29,32
};
